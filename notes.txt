 addition to the standard library called Data Classes.

 can be thought of as "mutable namedtuples with defaults".

 Data Classes use normal class definition syntax, 
 you are free to use inheritance, metaclasses, 
 docstrings, user-defined methods, class factories, 
 and other Python class features.

 A class decorator is provided which inspects 
 a class definition for variables with type annotations 
 as defined in PEP 526 ( fields )

 Using these fields, the decorator adds generated method 
 definitions to the class to support 
 instance initialization, 
 a repr, 
 comparison methods, 
 and optionally other methods 
 as described in the Specification section

 Such a class is called a Data Class, 
 but there's really nothing special about the class: 
 the decorator adds generated methods to the class 
 and returns the same class it was given.


There have been numerous attempts to define classes 
which exist primarily to store values which are 
accessible by attribute lookup. 
Some examples include:

collections.namedtuple in the standard library.

typing.NamedTuple in the standard library.

The popular attrs [1] project.

George Sakkis' recordType recipe [2], 
a mutable data type inspired by collections.namedtuple.

This PEP leverages that syntax (PEP 526) to provide a simple,
unobtrusive way to describe Data Classes. 
With two exceptions, 

the specified attribute type annotation is completely ignored 
by Data Classes.

No base classes or metaclasses are used by Data Classes.

The decorated classes are truly "normal" Python classes. 
The Data Class decorator should not interfere with any 
usage of the class.

One main design goal of Data Classes 
is to support static type checkers

Data Classes are not, and are not intended to be, 
a replacement mechanism for all of the above libraries. 
But being in the standard library will allow many of the simpler use cases
to instead leverage Data Classes. 
Many of the libraries listed have different feature sets, 
and will of course continue to exist and prosper.

Where is it not appropriate to use Data Classes?

API compatibility with tuples or dicts is required.
Type validation beyond that provided by PEPs 484 and 526 is required, 
or value validation or conversion is required.

PEP 484 -- Type Hints - Python3.5
PEP 526 -- Syntax for Variable Annotations - Python3.6
PEP 557 -- Data Classes - Python3.7


dataclasses is a module
dataclass - function - typically used as a class decorator
A field is defined as any variable identified in __annotations__
none of the Data Class machinery examines the type specified in the annotation.
Note that __annotations__ is guaranteed to be an ordered mapping


parameters to dataclass

The dataclass decorator will add various "dunder" methods to the class
def dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)

unsafe_hash: False

if eq == True and frozen == True
    __hash__ will be generated
if eq == True and frozen == False
    __hash__ == none

if eq == False
    __hash__ will be untouched - __hash__ method of super class


fields may optionally specify a default value, using normal Python syntax:



Users should never instantiate a Field object directly.

def field(*, default=MISSING, default_factory=MISSING, repr=True,
          hash=None, init=True, compare=True, metadata=None)

post-init processing

Class variables
defined by typing.ClassVar and not returned by fields() function

Init-only variables

dataclasses.InitVar type
passed to __post_init__ method
not returned by fields() function
not used by dataclasses

Frozen instances

by passing frozen=True to the @dataclass decorator 
you can emulate immutability. 

Data Classes will add __setattr__ and __delattr__ methods to the class
These methods will raise a FrozenInstanceError when invoked.

here is a tiny performance penalty when using frozen=True

Inheritance

Default factory functions
__init__ == False and tel_nos = field(default_factory=list)
will result in having tel_nos in the __init__

Mutable default values

same problem as normal class

Module level helper functions

fields() - Does not return pseudo-fields which are ClassVar or InitVar.
asdict() - creates a dict, recursive
astuple() - creates a tupe, recursive
make_dataclass() - 
make_dataclass(cls_name, fields, *, bases=(), namespace=None)
C = make_dataclass('C',
                   [('x', int),
                     'y',
                    ('z', int, field(default=5))],
                   namespace={'add_one': lambda self: self.x + 1})

Is equivalent to:

@dataclass
class C:
    x: int
    y: 'typing.Any'
    z: int = 5

    def add_one(self):
        return self.x + 1

replace(instance, **changes)

is_dataclass(class_or_instance)


at least for the initial release, __slots__ will not be supported

Why not just use namedtuple?

















